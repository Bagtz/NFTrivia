// src/index.ts
import { match } from "path-to-regexp";
import { bytesToString, stringToBytes, toBytes, toHex } from "viem";
var Router = class {
  options;
  routes;
  constructor(options) {
    this.options = options;
    this.routes = [];
    this.handler = this.handler.bind(this);
  }
  add(path, handler) {
    const keys = [];
    const matcher = match(path, { decode: decodeURIComponent });
    const route = { matcher, handler };
    this.routes.push(route);
    return route;
  }
  handle(url) {
    for (const route of this.routes) {
      const match2 = route.matcher(url);
      if (match2) {
        try {
          return route.handler(match2, route);
        } catch (e) {
          throw new Error(`Error handling route ${url}`, {
            cause: e
          });
        }
      }
    }
    return void 0;
  }
  async handler(data) {
    const url = bytesToString(toBytes(data.payload));
    const result = this.handle(url);
    if (result) {
      await this.options.app.createReport({
        payload: toHex(stringToBytes(result))
      });
    }
  }
};
var createRouter = (options) => {
  return new Router(options);
};
export {
  Router,
  createRouter
};
