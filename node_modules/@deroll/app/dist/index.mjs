// src/app.ts
import createClient from "openapi-fetch";
var HttpApp = class {
  options;
  advanceHandlers;
  inspectHandlers;
  POST;
  constructor(options) {
    this.options = options;
    this.advanceHandlers = [];
    this.inspectHandlers = [];
    const { POST } = createClient({ baseUrl: options.url });
    this.POST = POST;
  }
  async createNotice(notice) {
    const { data, response } = await this.POST("/notice", {
      body: notice
    });
    if (data) {
      return data.index;
    } else {
      throw new Error(response.statusText);
    }
  }
  async createReport(report) {
    const { response } = await this.POST("/report", {
      body: report
    });
    if (!response.ok) {
      throw new Error(response.statusText);
    }
  }
  async createVoucher(voucher) {
    const { data, response } = await this.POST("/voucher", {
      body: voucher
    });
    if (data) {
      return data.index;
    } else {
      throw new Error(response.statusText);
    }
  }
  handleAdvance = async (data) => {
    let finalResult = "reject";
    for (const handler of this.advanceHandlers) {
      try {
        const result = await handler(data);
        if (result == "accept") {
          if (!this.options.broadcastAdvanceRequests) {
            return result;
          }
          finalResult = result;
        }
      } catch (e) {
        console.error(e);
      }
    }
    return finalResult;
  };
  handleInspect = async (data) => {
    for (const handler of this.inspectHandlers) {
      try {
        await handler(data);
      } catch (e) {
        console.error(e);
      }
    }
  };
  addAdvanceHandler(handler) {
    this.advanceHandlers.push(handler);
  }
  addInspectHandler(handler) {
    this.inspectHandlers.push(handler);
  }
  async start() {
    let status = "accept";
    while (true) {
      const { data, response } = await this.POST("/finish", {
        body: { status },
        parseAs: "text"
      });
      if (response.status == 200 && data) {
        const request = JSON.parse(data);
        switch (request.request_type) {
          case "advance_state":
            status = await this.handleAdvance(
              request.data
            );
            break;
          case "inspect_state":
            await this.handleInspect(
              request.data
            );
            break;
        }
      } else if (response.status == 202) {
      }
    }
  }
};

// src/index.ts
var createApp = (options) => {
  return new HttpApp(options);
};
export {
  createApp
};
