import { AdvanceRequestHandler, Voucher, Payload, AdvanceRequestData } from '@deroll/core';
import { Address, Hex } from 'viem';

type Wallet = {
    ether: bigint;
    erc20: Record<Address, bigint>;
    erc721: Record<Address, Set<bigint>>;
    erc1155: Record<Address, Map<bigint, bigint>>;
};
type DeepReadonly<T> = Readonly<{
    [K in keyof T]: T[K] extends number | string | symbol ? Readonly<T[K]> : T[K] extends Array<infer A> ? Readonly<Array<DeepReadonly<A>>> : DeepReadonly<T[K]>;
}>;
interface WalletApp {
    etherBalanceOf(address: string): bigint;
    erc20BalanceOf(token: Address, address: string): bigint;
    erc721Has(token: Address, address: string, tokenId: bigint): boolean;
    erc1155BalanceOf(token: Address, address: string, tokenId: bigint): bigint;
    getWallet(address: string): DeepReadonly<Wallet>;
    handler: AdvanceRequestHandler;
    transferEther(from: string, to: string, value: bigint): void;
    transferERC20(token: Address, from: string, to: string, amount: bigint): void;
    transferERC721(token: Address, from: string, to: string, tokenId: bigint): void;
    transferERC1155(token: Address, from: string, to: string, tokenId: bigint, value: bigint): void;
    transferBatchERC1155(token: Address, from: string, to: string, tokenIds: bigint[], values: bigint[]): void;
    withdrawEther(address: Address, value: bigint): Voucher;
    withdrawERC20(token: Address, address: Address, amount: bigint): Voucher;
    withdrawERC721(token: Address, address: Address, tokenId: bigint): Voucher;
    withdrawERC1155(token: Address, address: Address, tokenId: bigint, value: bigint, data: Hex): Voucher;
    withdrawBatchERC1155(token: Address, address: Address, tokenIds: bigint[], values: bigint[], data: Hex): Voucher;
}

declare const WalletABI: readonly [{
    readonly name: "withdrawEther";
    readonly type: "function";
    readonly stateMutability: "nonpayable";
    readonly inputs: readonly [{
        readonly type: "uint256";
        readonly name: "value";
    }];
    readonly outputs: readonly [];
}, {
    readonly name: "withdrawERC20";
    readonly type: "function";
    readonly stateMutability: "nonpayable";
    readonly inputs: readonly [{
        readonly type: "address";
        readonly name: "token";
    }, {
        readonly type: "uint256";
        readonly name: "amount";
    }];
    readonly outputs: readonly [];
}, {
    readonly name: "withdrawERC721";
    readonly type: "function";
    readonly stateMutability: "nonpayable";
    readonly inputs: readonly [{
        readonly type: "address";
        readonly name: "token";
    }, {
        readonly type: "uint256";
        readonly name: "tokenId";
    }];
    readonly outputs: readonly [];
}, {
    readonly name: "withdrawERC1155";
    readonly type: "function";
    readonly stateMutability: "nonpayable";
    readonly inputs: readonly [{
        readonly type: "address";
        readonly name: "token";
    }, {
        readonly type: "uint256";
        readonly name: "tokenId";
    }, {
        readonly type: "uint256";
        readonly name: "value";
    }];
    readonly outputs: readonly [];
}, {
    readonly name: "withdrawERC1155Batch";
    readonly type: "function";
    readonly stateMutability: "nonpayable";
    readonly inputs: readonly [{
        readonly type: "address";
        readonly name: "token";
    }, {
        readonly type: "uint256[]";
        readonly name: "tokenIds";
    }, {
        readonly type: "uint256[]";
        readonly name: "values";
    }];
    readonly outputs: readonly [];
}];
declare const createWallet: () => WalletApp;
type EtherDeposit = {
    sender: Address;
    value: bigint;
};
type ERC20Deposit = {
    success: boolean;
    token: Address;
    sender: Address;
    amount: bigint;
};
type ERC721Deposit = {
    token: Address;
    sender: Address;
    tokenId: bigint;
};
type ERC1155SingleDeposit = {
    token: Address;
    sender: Address;
    tokenId: bigint;
    value: bigint;
};
type ERC1155BatchDeposit = {
    token: Address;
    sender: Address;
    tokenIds: readonly bigint[];
    values: readonly bigint[];
};
/**
 * Decode input according to https://github.com/cartesi/rollups-contracts/tree/v1.2.0#input-encodings-for-deposits
 * @param payload input payload
 * @returns
 */
declare const parseEtherDeposit: (payload: Payload) => EtherDeposit;
/**
 * Decode input according to https://github.com/cartesi/rollups-contracts/tree/v1.2.0#input-encodings-for-deposits
 * @param payload input payload
 * @returns
 */
declare const parseERC20Deposit: (payload: Payload) => ERC20Deposit;
/**
 * Decode input according to https://github.com/cartesi/rollups-contracts/tree/v1.2.0#input-encodings-for-deposits
 * @param payload input payload
 * @returns
 */
declare const parseERC721Deposit: (payload: Payload) => ERC721Deposit;
/**
 * Decode input according to https://github.com/cartesi/rollups-contracts/tree/v1.2.0#input-encodings-for-deposits
 * @param payload input payload
 * @returns
 */
declare const parseERC1155SingleDeposit: (payload: Payload) => ERC1155SingleDeposit;
/**
 * Decode input according to https://github.com/cartesi/rollups-contracts/tree/v1.2.0#input-encodings-for-deposits
 * @param payload input payload
 * @returns
 */
declare const parseERC1155BatchDeposit: (payload: Payload) => ERC1155BatchDeposit;
declare const isEtherDeposit: (data: AdvanceRequestData) => boolean;
declare const isERC20Deposit: (data: AdvanceRequestData) => boolean;
declare const isERC721Deposit: (data: AdvanceRequestData) => boolean;
declare const isERC1155SingleDeposit: (data: AdvanceRequestData) => boolean;
declare const isERC1155BatchDeposit: (data: AdvanceRequestData) => boolean;
declare const createWithdrawEtherVoucher: (application: Address, receiver: Address, value: bigint) => Voucher;
declare const createERC20TransferVoucher: (token: Address, recipient: Address, amount: bigint) => Voucher;
declare const createERC721TransferVoucher: (token: Address, from: Address, to: Address, tokenId: bigint) => Voucher;
declare const createERC1155SingleTransferVoucher: (token: Address, from: Address, to: Address, tokenId: bigint, value: bigint, data: Hex) => Voucher;
declare const createERC1155BatchTransferVoucher: (token: Address, from: Address, to: Address, tokenIds: bigint[], values: bigint[], data: Hex) => Voucher;

export { type ERC1155BatchDeposit, type ERC1155SingleDeposit, type ERC20Deposit, type ERC721Deposit, type EtherDeposit, WalletABI, type WalletApp, createERC1155BatchTransferVoucher, createERC1155SingleTransferVoucher, createERC20TransferVoucher, createERC721TransferVoucher, createWallet, createWithdrawEtherVoucher, isERC1155BatchDeposit, isERC1155SingleDeposit, isERC20Deposit, isERC721Deposit, isEtherDeposit, parseERC1155BatchDeposit, parseERC1155SingleDeposit, parseERC20Deposit, parseERC721Deposit, parseEtherDeposit };
